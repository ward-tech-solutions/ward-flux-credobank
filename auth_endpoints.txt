
# ============================================
# Authentication Endpoints
# ============================================

@app.post("/api/v1/auth/login", response_model=Token)
async def login(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):
    """Login endpoint - returns JWT token"""
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # Update last login
    user.last_login = datetime.utcnow()
    db.commit()

    # Create access token
    access_token = create_access_token(data={"sub": user.username})
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/api/v1/auth/register", response_model=UserResponse)
async def register(
    user_data: UserCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """Register new user (admin only)"""
    from auth import get_user_by_username, get_user_by_email
    if get_user_by_username(db, user_data.username):
        raise HTTPException(status_code=400, detail="Username already registered")
    if get_user_by_email(db, user_data.email):
        raise HTTPException(status_code=400, detail="Email already registered")

    user = create_user(db, user_data)
    return user

@app.get("/api/v1/auth/me", response_model=UserResponse)
async def get_current_user_info(current_user: User = Depends(get_current_active_user)):
    """Get current user info"""
    return current_user

@app.get("/api/v1/users", response_model=List[UserResponse])
async def list_users(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """List all users (admin only)"""
    users = db.query(User).all()
    return users

@app.put("/api/v1/users/{user_id}", response_model=UserResponse)
async def update_user(
    user_id: int,
    update_data: UserCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """Update user (admin only)"""
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    user.full_name = update_data.full_name
    user.email = update_data.email
    user.role = update_data.role
    user.region = update_data.region
    if update_data.password:
        from auth import get_password_hash
        user.hashed_password = get_password_hash(update_data.password)

    db.commit()
    db.refresh(user)
    return user

@app.delete("/api/v1/users/{user_id}")
async def delete_user(
    user_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """Delete user (admin only)"""
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    if user.id == current_user.id:
        raise HTTPException(status_code=400, detail="Cannot delete yourself")

    db.delete(user)
    db.commit()
    return {"success": True, "message": "User deleted"}

# ============================================
# Bulk Operations Endpoints
# ============================================

@app.get("/api/v1/bulk/template")
async def download_bulk_import_template(
    current_user: User = Depends(require_tech_or_admin)
):
    """Download CSV template for bulk import"""
    csv_content = generate_csv_template()
    return StreamingResponse(
        iter([csv_content]),
        media_type="text/csv",
        headers={"Content-Disposition": "attachment; filename=bulk_import_template.csv"}
    )

@app.post("/api/v1/bulk/import", response_model=BulkOperationResult)
async def bulk_import_devices(
    request: Request,
    file: UploadFile,
    current_user: User = Depends(require_tech_or_admin)
):
    """Bulk import devices from CSV/Excel"""
    zabbix = request.app.state.zabbix

    # Parse file
    if file.filename.endswith('.csv'):
        df = await parse_csv_file(file)
    elif file.filename.endswith(('.xlsx', '.xls')):
        df = await parse_excel_file(file)
    else:
        raise HTTPException(status_code=400, detail="Unsupported file format. Use CSV or Excel")

    # Validate data
    is_valid, errors = validate_bulk_import_data(df)
    if not is_valid:
        return BulkOperationResult(
            success=False,
            total=0,
            successful=0,
            failed=0,
            errors=[{"error": err} for err in errors],
            details=[]
        )

    # Process import
    result = await process_bulk_import(df, zabbix)
    return result

@app.post("/api/v1/bulk/update", response_model=BulkOperationResult)
async def bulk_update(
    request: Request,
    host_ids: List[str],
    update_data: dict,
    current_user: User = Depends(require_tech_or_admin)
):
    """Bulk update multiple devices"""
    zabbix = request.app.state.zabbix
    result = await bulk_update_devices(host_ids, update_data, zabbix)
    return result

@app.post("/api/v1/bulk/delete", response_model=BulkOperationResult)
async def bulk_delete(
    request: Request,
    host_ids: List[str],
    current_user: User = Depends(require_admin)
):
    """Bulk delete multiple devices"""
    zabbix = request.app.state.zabbix
    result = await bulk_delete_devices(host_ids, zabbix)
    return result

@app.get("/api/v1/bulk/export/csv")
async def export_csv(
    request: Request,
    current_user: User = Depends(get_current_active_user)
):
    """Export all devices to CSV"""
    zabbix = request.app.state.zabbix
    devices = await run_in_executor(zabbix.get_all_hosts)
    csv_content = export_devices_to_csv(devices)
    return StreamingResponse(
        iter([csv_content]),
        media_type="text/csv",
        headers={"Content-Disposition": "attachment; filename=devices_export.csv"}
    )

@app.get("/api/v1/bulk/export/excel")
async def export_excel(
    request: Request,
    current_user: User = Depends(get_current_active_user)
):
    """Export all devices to Excel"""
    zabbix = request.app.state.zabbix
    devices = await run_in_executor(zabbix.get_all_hosts)
    excel_content = export_devices_to_excel(devices)
    return StreamingResponse(
        io.BytesIO(excel_content),
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": "attachment; filename=devices_export.xlsx"}
    )

