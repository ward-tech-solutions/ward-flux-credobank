name: CredoBank CI

on:
  push:
    branches:
      - client/credo-bank
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    env:
      DATABASE_URL: postgresql://ward_admin:ward_admin_password@127.0.0.1:5432/ward_ops
      REDIS_URL: redis://:redispass@127.0.0.1:6379/0
      DEFAULT_ADMIN_PASSWORD: admin123
      NODE_ENV: production
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ward_admin
          POSTGRES_PASSWORD: ward_admin_password
          POSTGRES_DB: ward_ops
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ward_admin"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install system dependencies
        run: |
          # Remove old PostgreSQL client if present
          sudo apt-get remove -y postgresql-client postgresql-client-14 || true
          # Add PostgreSQL 15 repository
          sudo apt-get update
          sudo apt-get install -y curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update
          # Install PostgreSQL 15 client
          sudo apt-get install -y postgresql-client-15
          # Verify version and update alternatives
          /usr/lib/postgresql/15/bin/pg_dump --version
          sudo update-alternatives --install /usr/bin/pg_dump pg_dump /usr/lib/postgresql/15/bin/pg_dump 150
          sudo update-alternatives --install /usr/bin/pg_restore pg_restore /usr/lib/postgresql/15/bin/pg_restore 150
          pg_dump --version

      - name: Install Python dependencies
        run: |
          python -m venv venv
          ./venv/bin/pip install --upgrade pip
          ./venv/bin/pip install -r requirements.txt

      - name: Install frontend dependencies
        working-directory: frontend
        env:
          NODE_ENV: development
        run: |
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps
          echo "Installed $(ls node_modules | wc -l) packages"
          echo "Checking for vite..."
          ls -la node_modules/.bin/vite
          npx vite --version

      - name: Migrate seed data into PostgreSQL
        run: |
          if [ -f data/ward_ops.db ]; then
            ./venv/bin/python migrate_to_postgres.py
          else
            echo "[ci] data/ward_ops.db not present; skipping migrate_to_postgres.py"
          fi

      - name: Apply SQL migrations
        run: |
          ./venv/bin/python scripts/run_sql_migrations.py

      - name: Backend tests
        run: |
          ./venv/bin/python -m pytest

      - name: Frontend build & typecheck
        working-directory: frontend
        env:
          NODE_ENV: production
        run: |
          npx vite build
          npx tsc --noEmit

      - name: Celery smoke test
        env:
          ALLOW_SMOKE_ON_REAL_DB: "1"
        run: |
          ./venv/bin/python scripts/celery_smoke_test.py

      - name: Build application image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} \
                       -t ghcr.io/${{ github.repository }}:credobank-latest .

      - name: Generate PostgreSQL backup
        run: |
          pg_dump --format=custom --file=seed.dump "$DATABASE_URL"
          ls -lh seed.dump
          file seed.dump

      - name: Build seeded PostgreSQL image
        run: |
          cat <<'EOF' > Dockerfile.seeddb
          FROM postgres:15-alpine
          COPY seed.dump /docker-entrypoint-initdb.d/seed.dump
          EOF
          docker build -f Dockerfile.seeddb \
            -t ghcr.io/${{ github.repository }}-postgres:${{ github.sha }} \
            -t ghcr.io/${{ github.repository }}-postgres:credobank-latest .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images to GHCR
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}:credobank-latest
          docker push ghcr.io/${{ github.repository }}-postgres:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}-postgres:credobank-latest

      - name: Upload deployment bundle
        uses: actions/upload-artifact@v4
        with:
          name: credobank-deployment
          path: |
            deploy/docker-compose.yml
            deploy/.env.prod.example
            deploy/DEPLOYMENT.md

      - name: Cleanup temporary build files
        if: always()
        run: |
          rm -f seed.dump Dockerfile.seeddb || true
