version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ward-postgres
    environment:
      POSTGRES_DB: ward_flux
      POSTGRES_USER: ward
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ward-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ward"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis - Task Queue & Cache
  redis:
    image: redis:7-alpine
    container_name: ward-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - ward-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # VictoriaMetrics - Time-Series Database
  victoriametrics:
    image: victoriametrics/victoria-metrics:latest
    container_name: ward-victoriametrics
    command:
      - '--storageDataPath=/victoria-metrics-data'
      - '--httpListenAddr=:8428'
      - '--retentionPeriod=12'
      - '--search.maxQueryDuration=60s'
    volumes:
      - victoria-data:/victoria-metrics-data
    ports:
      - "8428:8428"
    networks:
      - ward-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8428/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # WARD FLUX API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ward-api
    environment:
      - DATABASE_URL=postgresql://ward:${POSTGRES_PASSWORD}@postgres:5432/ward_flux
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - VICTORIA_URL=http://victoriametrics:8428
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ZABBIX_URL=${ZABBIX_URL}
      - ZABBIX_USER=${ZABBIX_USER}
      - ZABBIX_PASSWORD=${ZABBIX_PASSWORD}
    volumes:
      - ./logs:/app/logs
      - api-data:/data
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      victoriametrics:
        condition: service_healthy
    networks:
      - ward-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Celery Worker - SNMP Polling
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ward-celery-worker
    command: celery -A celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://ward:${POSTGRES_PASSWORD}@postgres:5432/ward_flux
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - VICTORIA_URL=http://victoriametrics:8428
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./logs:/app/logs
      - celery-data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      victoriametrics:
        condition: service_healthy
    networks:
      - ward-network
    restart: unless-stopped

  # Celery Beat - Task Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ward-celery-beat
    command: celery -A celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://ward:${POSTGRES_PASSWORD}@postgres:5432/ward_flux
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./logs:/app/logs
      - beat-data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ward-network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ward-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - victoriametrics
    networks:
      - ward-network
    restart: unless-stopped

  # Nginx - Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ward-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - grafana
    networks:
      - ward-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres-data:
  redis-data:
  victoria-data:
  grafana-data:
  api-data:
  celery-data:
  beat-data:

networks:
  ward-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
